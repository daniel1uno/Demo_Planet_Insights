define(function () {
  return {
    MAP_DEFORESTATION:
      '//VERSION=3\n\n// Thresholds and constants\nconst THRESHOLD = 0.25;  // Minimum NDVI difference between years\nconst BLUE_THRESHOLD = 0.10;  // Cloud threshold for the blue band\nconst MIN_NDVI = 0.5;  // Minimum NDVI to consider for previous year\nfunction setup() {\n  return {\n    input: [{\n      bands: ["B02", "B03", "B04", "B05", "B08"]\n    }],\n    output: { bands: 3 },\n    mosaicking: "ORBIT"\n  };\n}\n\n\nfunction calculateMean(values) {\n  return values.length === 0 ? 1 : values.reduce((sum, val) => sum + parseFloat(val), 0) / values.length;\n}\n\nfunction getPreviousMonths(sceneMonth, sceneYear, monthsToTake) {\n  let months = [];\n  let years = [];\n\n  for (let i = 0; i < monthsToTake; i++) {\n    let month = sceneMonth - i;\n    let year = sceneYear;\n\n    if (month <= 0) {\n      month += 12;\n      year -= 1;\n    }\n\n    months.push(month);\n    years.push(year);\n  }\n\n  return { months, years };\n}\n\nfunction evaluatePixel(samples, scenes) {\n  const { months: targetMonths, years: targetYears } = getPreviousMonths(scenes[0].date.getMonth(), scenes[0].date.getFullYear(), 3);\n\n  let currentYearNDVI = 0, currentYearCount = 0;\n  let previousYearNDVI = 0, previousYearCount = 0;\n  let lastYearNDVI = [[], [], []];\n\n  samples.forEach((sample, i) => {\n const scene = scenes[i];\n    const sceneMonth = scene.date.getMonth();\n    const sceneYear = scene.date.getFullYear();\n\n    if (targetMonths.includes(sceneMonth) && sample.B02 < BLUE_THRESHOLD) {\n      const ndvi = index(sample.B08, sample.B04);\n      if (targetYears.includes(sceneYear)) {\n        currentYearNDVI += ndvi;\n        currentYearCount++;\n      } else if (targetYears.includes(sceneYear + 1 )) {\n      previousYearNDVI += ndvi;\n        previousYearCount++;\n\n        const monthIndex = targetMonths.indexOf(sceneMonth);\n        if (monthIndex !== -1) {\n          lastYearNDVI[monthIndex].push(ndvi);\n        }\n      }\n    }\n  });\n\n  const avgCurrentYearNDVI = currentYearNDVI / currentYearCount;\n  const avgPreviousYearNDVI = previousYearNDVI / previousYearCount;\n  const difference = avgPreviousYearNDVI - avgCurrentYearNDVI;\n\n  const validPreviousYearNDVI = lastYearNDVI.every(month => calculateMean(month) > MIN_NDVI);\n\n  if (index(samples[0].B03, samples[0].B08) < 0.5 && difference >= THRESHOLD && avgPreviousYearNDVI > MIN_NDVI && validPreviousYearNDVI) {\n    return [3 * (2 / 3) * 10 * difference * samples[0].B04, 3 * samples[0].B03, 3 * samples[0].B02];\n  } else {\n    return [3 * samples[0].B04, 3 * samples[0].B03, 3 * samples[0].B02];\n  }\n}\n\nfunction preProcessScenes(collections) {\n  const twelveMonthsAgo = collections.to.getTime() - (14 * 31 * 24 * 3600 * 1000);\n  collections.scenes.orbits = collections.scenes.orbits.filter(orbit => new Date(orbit.dateFrom).getTime() >= twelveMonthsAgo);\n  return collections;\n}',
  };
});
